"""Purpose: Ingests a structured JSON \"intelligence package\" into the Notion workspace. It performs a two-pass process: first creating all entities, then linking their relationships.\nUtility: Provides a structured way to bulk-load interconnected data into Notion. It's a data import tool that understands the relationships between different databases.\n"""\n#!/usr/bin/env python3\n"""\nScript to ingest a structured intelligence package (JSON) into Notion.\nThis script will create or update pages in the Project Nassau databases.\n"""\n\nimport os\nimport sys\nimport json\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any\n\n# Add parent directory to path to import blackcore modules\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom blackcore.notion.client import NotionClient\nfrom blackcore.notion.database_creator import DatabaseCreator\nfrom dotenv import load_dotenv\n\n# This map is the \"brain\" of the relational linker.\n# It defines which fields are relations and which database they point to.\n# Key: Source Database Name, Value: {Notion Property Name: Target Database Name}\nRELATION_FIELD_MAP = {\n    \"Actionable Tasks\": {\n        \"Assignee\": \"People & Contacts\",\n        \"Related Agenda\": \"Agendas & Epics\",\n        \"Blocked By\": \"Actionable Tasks\",  # Self-referential\n    },\n    \"People & Contacts\": {\n        \"Organization\": \"Organizations & Bodies\",\n        \"Linked Transgressions\": \"Identified Transgressions\",\n    },\n    \"Organizations & Bodies\": {\n        \"Key People\": \"People & Contacts\",\n        \"Linked Documents\": \"Documents & Evidence\",\n    },\n    \"Agendas & Epics\": {\n        \"Owner\": \"People & Contacts\",  # Person property is treated as a relation\n        \"Actionable Tasks\": \"Actionable Tasks\",\n        \"Key Documents\": \"Documents & Evidence\",\n    },\n    \"Identified Transgressions\": {\n        \"Perpetrator (Person)\": \"People & Contacts\",\n        \"Perpetrator (Org)\": \"Organizations & Bodies\",\n        \"Evidence\": \"Intelligence & Transcripts\",  # Can be multi-relation\n    },\n    \"Intelligence & Transcripts\": {\n        \"Tagged Entities\": \"People & Contacts\",  # Can be multi-relation to others too\n    },\n    \"Key Places & Events\": {\n        \"People Involved\": \"People & Contacts\",\n        \"Related Transgressions\": \"Identified Transgressions\",\n    },\n}\n\n\nclass IntelligenceIngestor:\n    \"\"\"Handles the ingestion of a structured intelligence package into Notion.\"\"\"\n\n    def __init__(self, client: NotionClient, dry_run: bool = False):\n        self.client = client\n        self.dry_run = dry_run\n        self.id_cache: Dict[str, Dict[str, str]] = {}\n        self.data: Dict[str, Any] = {}\n        print(f\"Ingestor initialized. Dry run: {self.dry_run}\")\n\n    def _get_db_id(self, db_name: str) -> str:\n        \"\"\"Helper to get a database ID from the client's cache, raising an error if not found.\"\"\"\n        db_id = self.client.get_cached_database_id(db_name)\n        if not db_id:\n            raise ValueError(\n                f\"FATAL: Could not find database ID for '{db_name}'. Ensure it was created.\"\n            )\n        return db_id\n\n    def ingest_package(self, package_path: Path):\n        \"\"\"Loads and processes an entire intelligence package.\"\"\"\n        print(f\"Loading intelligence package from: {package_path}\")\n        with open(package_path, \"r\") as f:\n            self.data = json.load(f)\n\n        db_names_from_schema = [schema.name for schema in get_all_database_schemas()]\n        for db_name in db_names_from_schema:\n            self.id_cache[db_name] = {}\n\n        # --- PASS 1: Create all core objects without linking relations ---\n        print(\"\n--- PASS 1: Creating/Finding core database pages ---\")\n        self._process_all_items_for_creation()\n\n        # --- PASS 2: Update objects with relations ---\n        print(\"\n--- PASS 2: Linking relations for all objects ---\")\n        self._link_all_relations()\n\n        print(\"\nâœ… Ingestion complete!\")\n\n    def _find_or_create_page(\n        self, db_name: str, title: str, properties: Dict[str, Any]\n    ) -> str:\n        \"\"\"Finds a page by title in a DB, or creates it if it doesn't exist.\"\"\"\n        if title in self.id_cache.get(db_name, {}):\n            return self.id_cache[db_name][title]\n\n        db_id = self._get_db_id(db_name)\n\n        search_results = self.client.client.databases.query(\n            database_id=db_id, filter={\"property\": \"title\", \"title\": {\"equals\": title}}\n        )\n\n        if search_results.get(\"results\"):\n            page_id = search_results[\"results\"][0][\"id\"]\n            print(f\"  [FOUND] Found '{title}' in {db_name} (ID: {page_id}).\")\n            self.id_cache[db_name][title] = page_id\n            return page_id\n        else:\n            print(f\"  [CREATE] Creating '{title}' in {db_name}...\")\n            if self.dry_run:\n                print(\"    DRY RUN: Skipping creation.\")\n                return f\"dry-run-id-for-{title}\"

            new_page = self.client.client.pages.create(\n                parent={\"database_id\": db_id}, properties=properties\n            )\n            page_id = new_page[\"id\"]\n            self.id_cache[db_name][title] = page_id\n            return page_id\n\n    def _build_properties(self, item: Dict[str, Any], db_name: str) -> Dict[str, Any]:\n        \"\"\"Builds a Notion properties object from a JSON item, excluding relations.\"\"\"\n        properties = {}\n        relation_fields_for_db = list(RELATION_FIELD_MAP.get(db_name, {}).keys())\n\n        # Map JSON keys to Notion property names and types\n        prop_map = {\n            # Selects\n            \"status\": (\"Status\", \"select\"),\n            \"role\": (\"Role\", \"select\"),\n            \"priority\": (\"Priority\", \"select\"),\n            \"phase\": (\"Phase\", \"select\"),\n            \"category\": (\"Category\", \"select\"),\n            \"severity\": (\"Severity\", \"select\"),\n            \"source\": (\"Source\", \"select\"),\n            # Rich Text\n            \"notes\": (\"Notes\", \"rich_text\"),\n            \"description\": (\"Description\", \"rich_text\"),\n            \"objective\": (\"Objective Summary\", \"rich_text\"),\n            \"rawNote\": (\"Raw Transcript/Note\", \"rich_text\"),\n            # Others\n            \"email\": (\"Email\", \"email\"),\n            \"website\": (\"Website\", \"url\"),\n            \"dueDate\": (\"Due Date\", \"date\"),\n            \"recordedDate\": (\"Date Recorded\", \"date\"),\n            \"date\": (\"Date of Transgression\", \"date\"),\n        }\n\n        for json_key, (notion_name, prop_type) in prop_map.items():\n            if json_key in item and notion_name not in relation_fields_for_db:\n                value = item[json_key]\n                if prop_type == \"select\":\n                    properties[notion_name] = {\"select\": {\"name\": value}}\n                elif prop_type == \"rich_text\":\n                    properties[notion_name] = {\n                        \"rich_text\": [{\"text\": {\"content\": value}}]\n                    }\n                elif prop_type == \"email\":\n                    properties[notion_name] = {\"email\": value}\n                elif prop_type == \"url\":\n                    properties[notion_name] = {\"url\": value}\n                elif prop_type == \"date\":\n                    properties[notion_name] = {\"date\": {\"start\": value}}\n        return properties\n\n    def _process_all_items_for_creation(self):\n        \"\"\"Processes all items from the JSON data for creation.\"\"\"\n        # Maps JSON list key to (Database Name, Title Key in JSON)\n        db_map = {\n            \"organizations\": (\"Organizations & Bodies\", \"name\"),\n            \"people\": (\"People & Contacts\", \"fullName\"),\n            \"agendas\": (\"Agendas & Epics\", \"title\"),\n            \"tasks\": (\"Actionable Tasks\", \"name\"),\n            \"transgressions\": (\"Identified Transgressions\", \"summary\"),\n            \"intelligence\": (\"Intelligence & Transcripts\", \"title\"),\n        }\n\n        for json_key, (db_name, title_key) in db_map.items():\n            print(f\"\nProcessing creation for '{db_name}'...\")\n            for item in self.data.get(json_key, []):\n                title = item.get(title_key)\n                if not title:\n                    print(\n                        f\"  [WARN] Skipping item in '{db_name}' with no '{title_key}'.\"\n                    )\n                    continue\n\n                properties = self._build_properties(item, db_name)\n                # The title property is always required\n                properties[\"title\"] = {\"title\": [{\"text\": {\"content\": title}}]}\n                self._find_or_create_page(db_name, title, properties)\n\n    def _link_all_relations(self):\n        \"\"\"Iterates through the entire dataset and links all defined relations.\"\"\"\n        db_map = {\n            \"tasks\": (\"Actionable Tasks\", \"name\"),\n            \"people\": (\"People & Contacts\", \"fullName\"),\n            \"agendas\": (\"Agendas & Epics\", \"title\"),\n            \"transgressions\": (\"Identified Transgressions\", \"summary\"),\n        }\n\n        # Map JSON keys back to Notion Field names for lookup in RELATION_FIELD_MAP\n        json_to_notion_field_map = {\n            \"assignee\": \"Assignee\",\n            \"relatedAgenda\": \"Related Agenda\",\n            \"blockedBy\": \"Blocked By\",\n            \"organization\": \"Organization\",\n            \"owner\": \"Owner\",\n            \"perpetratorOrg\": \"Perpetrator (Org)\",\n            \"perpetratorPerson\": \"Perpetrator (Person)\",\n            \"evidence\": \"Evidence\",\n        }\n\n        for json_key, (db_name, title_key) in db_map.items():\n            if db_name not in RELATION_FIELD_MAP:\n                continue\n\n            print(f\"\nLinking relations for '{db_name}'...\")\n            for item in self.data.get(json_key, []):\n                source_title = item.get(title_key)\n                if not source_title or source_title not in self.id_cache.get(\n                    db_name, {}\n                ):\n                    continue\n\n                source_page_id = self.id_cache[db_name][source_title]\n                properties_to_update = {}\n\n                for json_field, notion_field in json_to_notion_field_map.items():\n                    if json_field in item and notion_field in RELATION_FIELD_MAP.get(\n                        db_name, {}\n                    ):\n                        target_db_name = RELATION_FIELD_MAP[db_name][notion_field]\n                        target_titles = item[json_field]\n\n                        if not isinstance(target_titles, list):\n                            target_titles = [\n                                target_titles\n                            ]  # Handle single and multi-relations\n\n                        relation_ids = []\n                        for target_title in target_titles:\n                            if target_title in self.id_cache.get(target_db_name, {}):\n                                relation_ids.append(\n                                    {\"id\": self.id_cache[target_db_name][target_title]}\n                                )\n                            else:\n                                print(\n                                    f\"  [WARN] Could not find target '{target_title}' in '{target_db_name}' to link from '{source_title}'.\"\n                                )\n\n                        if relation_ids:\n                            # The property type for linking is \"relation\" for Relation fields\n                            # and \"people\" for Person fields.\n                            prop_type = (\n                                \"people\" if notion_field == \"Owner\" else \"relation\"\n                            )\n                            properties_to_update[notion_field] = {\n                                prop_type: relation_ids\n                            }\n\n                if properties_to_update:\n                    print(\n                        f\"  [LINK] Updating relations for '{source_title}' in '{db_name}'.\"\n                    )\n                    if self.dry_run:\n                        print(\n                            f\"    DRY RUN: Skipping update for page {source_page_id}.\"\n                        )\n                        continue\n\n                    self.client.client.pages.update(\n                        page_id=source_page_id, properties=properties_to_update\n                    )\n                    time.sleep(0.5)\n\n\ndef main():\n    \"\"\"Main function to run the ingestion.\"\"\"\n    load_dotenv()\n\n    package_file = Path(\"intelligence_package_20250618.json\")\n    if not package_file.exists():\n        print(f\"Error: Intelligence package file not found at '{package_file}'\")\n        return 1\n\n    try:\n        print(\"Verifying database structure first...\")\n        client = NotionClient()\n        # This step is crucial as it populates the client's internal DB ID cache\n        creator = DatabaseCreator(client, os.getenv(\"NOTION_PARENT_PAGE_ID\"))\n        creator.create_all_databases(check_existing=True)\n\n        ingestor = IntelligenceIngestor(\n            client, dry_run=False\n        )  # Set to True to test without writing\n        ingestor.ingest_package(package_file)\n\n    except Exception as e:\n        print(f\"\nAn unexpected error occurred: {e}\")\n        # Re-raise to see the full traceback for easier debugging\n        raise e\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n

#!/usr/bin/env python3
"""
Generate a secure master key for Blackcore encryption.

This script generates a cryptographically secure master key suitable for
use with the BLACKCORE_MASTER_KEY environment variable.
"""

import secrets
import string
import argparse
import sys
from pathlib import Path


def generate_secure_key(length: int = 32, complexity: str = "high") -> str:
    """Generate a cryptographically secure key.
    
    Args:
        length: Key length (minimum 16, default 32)
        complexity: Key complexity level ('high', 'medium', 'simple')
    
    Returns:
        Secure random key string
    """
    if length < 16:
        raise ValueError("Key length must be at least 16 characters")
    
    if complexity == "high":
        # URL-safe base64 encoded random bytes (recommended)
        return secrets.token_urlsafe(length)
    elif complexity == "medium":
        # Alphanumeric with special characters
        alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    else:  # simple
        # Alphanumeric only
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(length))


def save_to_env_file(key: str, env_path: Path = Path(".env")) -> bool:
    """Save the key to .env file if it exists.
    
    Args:
        key: The generated key
        env_path: Path to .env file
        
    Returns:
        True if saved, False otherwise
    """
    if not env_path.exists():
        return False
    
    # Read existing content
    with open(env_path, 'r') as f:
        lines = f.readlines()
    
    # Check if BLACKCORE_MASTER_KEY already exists
    key_exists = False
    for i, line in enumerate(lines):
        if line.strip().startswith('BLACKCORE_MASTER_KEY='):
            key_exists = True
            print(f"\n‚ö†Ô∏è  WARNING: BLACKCORE_MASTER_KEY already exists in {env_path}")
            response = input("Do you want to replace it? (y/N): ")
            if response.lower() == 'y':
                lines[i] = f'BLACKCORE_MASTER_KEY={key}\n'
            else:
                return False
            break
    
    # Add key if it doesn't exist
    if not key_exists:
        # Add after the security configuration comment if it exists
        inserted = False
        for i, line in enumerate(lines):
            if 'Security Configuration' in line:
                # Find the next empty line or end of security section
                j = i + 1
                while j < len(lines) and lines[j].strip() and not lines[j].startswith('#'):
                    j += 1
                lines.insert(j, f'BLACKCORE_MASTER_KEY={key}\n')
                if j < len(lines) and lines[j].strip():
                    lines.insert(j + 1, '\n')
                inserted = True
                break
        
        # If no security section found, add at the beginning
        if not inserted:
            lines.insert(0, f'# Generated by generate_master_key.py\n')
            lines.insert(1, f'BLACKCORE_MASTER_KEY={key}\n')
            lines.insert(2, '\n')
    
    # Write back
    with open(env_path, 'w') as f:
        f.writelines(lines)
    
    return True


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="Generate a secure master key for Blackcore encryption"
    )
    parser.add_argument(
        "-l", "--length",
        type=int,
        default=32,
        help="Key length (minimum 16, default 32)"
    )
    parser.add_argument(
        "-c", "--complexity",
        choices=["high", "medium", "simple"],
        default="high",
        help="Key complexity level (default: high)"
    )
    parser.add_argument(
        "-s", "--save",
        action="store_true",
        help="Save to .env file if it exists"
    )
    parser.add_argument(
        "-q", "--quiet",
        action="store_true",
        help="Only output the key (no additional text)"
    )
    
    args = parser.parse_args()
    
    try:
        # Generate key
        key = generate_secure_key(args.length, args.complexity)
        
        if args.quiet:
            print(key)
        else:
            print("\nüîê Blackcore Master Key Generator")
            print("=" * 40)
            print(f"Key Length: {args.length} characters")
            print(f"Complexity: {args.complexity}")
            print("\nüìã Generated Key:")
            print(f"{key}")
            
            if args.save:
                print("\nüíæ Saving to .env file...")
                if save_to_env_file(key):
                    print("‚úÖ Key saved successfully!")
                else:
                    print("‚ùå Key not saved.")
            else:
                print("\nüìù Instructions:")
                print("1. Copy the key above")
                print("2. Add to your .env file:")
                print(f"   BLACKCORE_MASTER_KEY={key}")
                print("3. Keep this key secure and never commit it!")
            
            print("\n‚ö†Ô∏è  Security Notes:")
            print("- Store this key securely (password manager recommended)")
            print("- Never commit this key to version control")
            print("- Use different keys for different environments")
            print("- Rotate keys periodically for better security")
    
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nOperation cancelled.", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()